{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { z, ZodType as ZodSchema, ZodVoid } from \"zod\";\n\nexport class ActionClientError extends Error {\n  statusCode = 500;\n  constructor(message: string, statusCode: number) {\n    super(message);\n    this.name = \"ServerError\";\n    this.statusCode = statusCode;\n  }\n}\ntype MiddlewareFnType<T> = ({\n  ctx,\n  req,\n}: {\n  ctx: T;\n  req: NextRequest;\n}) => Promise<{ ctx: T }>;\n\nexport class ActionClient<\n  TCtx extends object,\n  TParsedQuerySchema extends ZodSchema = ZodVoid,\n  TParsedInputSchema extends ZodSchema = ZodVoid,\n> {\n  readonly #req: NextRequest;\n  readonly #querySchemaFn: ZodSchema = z.void();\n  readonly #method: \"GET\" | \"POST\" | \"\" = \"\";\n  #ctx: TCtx | undefined;\n  readonly #inputSchemaFn: ZodSchema | null = null;\n  readonly #err: ActionClientError | null = null;\n\n  readonly #middlewareFns: MiddlewareFnType<TCtx>[] = [];\n\n  constructor({\n    req,\n    querySchemaFn,\n    inputSchemaFn,\n    method,\n    ctx,\n    err,\n    middlewareFns,\n  }: {\n    req: NextRequest;\n    querySchemaFn?: TParsedQuerySchema;\n    inputSchemaFn?: TParsedInputSchema | null;\n    method?: \"GET\" | \"POST\" | \"\";\n    ctx?: TCtx;\n    err?: ActionClientError | null;\n    middlewareFns?: MiddlewareFnType<TCtx>[];\n  }) {\n    this.#req = req;\n\n    if (method) this.#method = method;\n\n    if (querySchemaFn) this.#querySchemaFn = querySchemaFn;\n    if (inputSchemaFn) this.#inputSchemaFn = inputSchemaFn;\n\n    if (ctx) {\n      this.#ctx = { ...ctx };\n    }\n\n    if (err) {\n      this.#err = err;\n    }\n    if (middlewareFns && middlewareFns?.length > 0) {\n      this.#middlewareFns = middlewareFns;\n    }\n  }\n\n  use(middlewareFn: MiddlewareFnType<TCtx>) {\n    const middlewareFns = this.#middlewareFns ?? [];\n    middlewareFns.push(middlewareFn);\n    return new ActionClient({\n      req: this.#req,\n      querySchemaFn: this.#querySchemaFn,\n      method: this.#method,\n      inputSchemaFn: this.#inputSchemaFn,\n      err: this.#err,\n      ctx: this.#ctx,\n      middlewareFns,\n    }) as ActionClient<TCtx, TParsedInputSchema, TParsedInputSchema>;\n  }\n\n  query<TSchema extends ZodSchema>(schemaFn: TSchema) {\n    return new ActionClient({\n      req: this.#req,\n      querySchemaFn: schemaFn,\n      method: this.#method,\n      inputSchemaFn: this.#inputSchemaFn,\n      err: this.#err,\n      ctx: this.#ctx,\n      middlewareFns: this.#middlewareFns,\n    }) as ActionClient<TCtx, z.infer<TSchema>, TParsedInputSchema>;\n  }\n\n  json<TSchema extends ZodSchema>(schemaFn: TSchema) {\n    let err: ActionClientError | null = null;\n    if (this.#inputSchemaFn) {\n      err = new ActionClientError(\n        \"Cannot chain parsing data of types like .json().json() or .json().formData()\",\n        401,\n      );\n    }\n    return new ActionClient({\n      req: this.#req,\n      querySchemaFn: this.#querySchemaFn,\n      method: this.#method,\n      inputSchemaFn: schemaFn,\n      err: err,\n      ctx: this.#ctx,\n      middlewareFns: this.#middlewareFns,\n    }) as ActionClient<TCtx, TParsedQuerySchema, z.infer<TSchema>>;\n  }\n\n  async action(\n    actionFn: ({\n      parsedQuery,\n      ctx,\n    }: {\n      parsedQuery: TParsedQuerySchema;\n      parsedInput: TParsedInputSchema;\n      ctx: TCtx;\n    }) => NextResponse | Promise<NextResponse>,\n  ) {\n    try {\n      if (this.#err) {\n        console.log(this.#err);\n        throw this.#err;\n      }\n      let parsedQuery: unknown = undefined;\n      if (!this.#method) {\n        throw new ActionClientError(\"No method defined\", 400);\n      }\n\n      if (this.#middlewareFns?.length > 0 && this.#ctx) {\n        for (const fn of this.#middlewareFns) {\n          const { ctx } = await fn({ ctx: this.#ctx, req: this.#req });\n          this.#ctx = ctx;\n        }\n      }\n\n      if (this.#querySchemaFn) {\n        const { success, data, error } = this.#querySchemaFn.safeParse(\n          Object.fromEntries(this.#req.nextUrl.searchParams as any),\n        );\n        if (!success) {\n          throw new ActionClientError(\n            `Failed to parse query. ${error.issues[0].message}`,\n            400,\n          );\n        }\n        parsedQuery = data;\n      }\n\n      let parsedInput: unknown = undefined;\n      if (this.#method === \"POST\") {\n        let parsedBody;\n        try {\n          parsedBody = await this.#req.json();\n        } catch (err) {\n          console.error(\n            `Parsing failed of json request. Check headers and body sent`,\n            err,\n          );\n          throw new ActionClientError(\"Parsing failed of req.body\", 400);\n        }\n        if (this.#inputSchemaFn) {\n          const { success, data, error } =\n            this.#inputSchemaFn.safeParse(parsedBody);\n          if (!success) {\n            throw new ActionClientError(\n              `Failed to parse body. ${error.issues[0].message}`,\n              400,\n            );\n          }\n          parsedInput = data;\n        }\n      }\n\n      return actionFn({\n        parsedQuery: parsedQuery as TParsedQuerySchema,\n        parsedInput: parsedInput as TParsedInputSchema,\n        ctx: this.#ctx as TCtx,\n      });\n    } catch (err) {\n      if (err instanceof ActionClientError) {\n        console.error(`[known error]`, err.message, err.name, err.statusCode);\n        return NextResponse.json(\n          {\n            message: err.message,\n          },\n          {\n            status: err.statusCode,\n          },\n        );\n      }\n      console.error(err);\n      return NextResponse.json(\n        {\n          message: \"Internal Server Error\",\n        },\n        {\n          status: 500,\n        },\n      );\n    }\n  }\n\n  method(_method: \"GET\" | \"POST\") {\n    return new ActionClient({\n      req: this.#req,\n      querySchemaFn: this.#querySchemaFn,\n      method: _method,\n      inputSchemaFn: this.#inputSchemaFn,\n      err: this.#err,\n      ctx: this.#ctx,\n      middlewareFns: this.#middlewareFns,\n    });\n  }\n}\n"],"mappings":"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","names":["_method"]}